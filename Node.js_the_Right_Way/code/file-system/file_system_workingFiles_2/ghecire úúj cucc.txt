$ node --harmony read-stream.js no-such-file
ERROR: ENOENT, open 'no-such-file'
Since we’re listening for error events, Node invokes our handler (and then
proceeds to exit normally). If you don’t listen for error events, but one happens
anyway, Node will throw an exception. And as we saw before, an uncaught
exception will cause the process to terminate.
Blocking the Event Loop with Synchronous File Access
The file-access methods we’ve discussed in this chapter so far are asyn-
chronous. They perform their I/O duties—waiting as necessary—completely
in the background, only to invoke callbacks later. This is by far the preferred
way to do I/O in Node.
Even so, many of the methods in the fs module have synchronous versions
as well. These end in *Sync, like readFileSync , for example. Doing synchronous
file access might look familiar to you if you haven’t done a lot of async devel-
opment in the past. However, it comes at a substantial cost.
When you use the *Sync methods, the Node.js process will block until the
I/O finishes. This means Node won’t execute any other code, won’t trigger
any callbacks, won’t process any events, won’t accept any connections—noth-
ing. It’ll just sit there indefinitely waiting for the operation to complete.
However, synchronous methods are simpler to use since they lack the callback
step. They either return successfully or throw an exception, without the need
for a callback function. There actually are cases where this style of access is
OK; we’ll discuss them in the next section.
Here’s an example of how to read a file using the readFileSync() method:
const
fs = require('fs'),
data = fs.readFileSync('target.txt');
process.stdout.write(data.toString());
The return value of readFileSync() is a buffer—the same as the paramete